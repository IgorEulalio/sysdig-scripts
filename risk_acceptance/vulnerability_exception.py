import csv
import requests
import sys
import os
import argparse
import datetime

def retrieve_set_sysdig_params():
    parser = argparse.ArgumentParser()
    parser.add_argument("--base-url", dest='sysdig_base_url', type=str,
                        help="Base url of sysdig. ex: us2.app.sysdig.com")
    parser.add_argument("--api-token", dest='sysdig_api_token', type=str, help="Sysdig API Token")
    parser.add_argument("--acceptance-files-directory", dest='acceptance_files_directory',
                        type=str, help="Full path to directory containing csv files for acceptance")
    parser.add_argument("--ssl-verification", dest='ssl_verification', type=str, help="enabled or disabled for values. Default is disabled.")
    return parser.parse_args()

def retrieve_sysdig_header_url(args):
    auth_token = args.sysdig_api_token
    auth_header = {'Authorization': 'Bearer ' + auth_token}
    base_url = args.sysdig_base_url.replace("https://", "")
    url = f'https://{base_url}/api/scanning/riskmanager/v2/definitions'
    return auth_header, url

def validate_date_format(date_text):
    try:
        datetime.date.fromisoformat(date_text)
    except ValueError:
        raise ValueError("Incorrect data format for ", date_text," should be YYYY-MM-DD")

def retrieve_existing_exceptions(auth_header, url, ssl_verification):
    existing_risk_exceptions = []
    existing_entity_exceptions = []

    try:
        response = requests.get(url, headers=auth_header, params={
                                'limit': 100}, verify=ssl_verification)
        response.raise_for_status()
    except requests.exceptions.HTTPError as e:
        print(" ERROR ".center(80, "-"))
        print(e)
    except requests.exceptions.RequestException as e:
        print(e)
    existing_risk_exceptions.append((response.json()['data']))

    while (response.json()['page']['next'] != ""):
        try:
            response = requests.get(url, headers=auth_header, params={
                'cursor': response.json()['page']['next'], 'limit': 100}, verify=ssl_verification)
            response.raise_for_status()
        except requests.exceptions.HTTPError as e:
            print(" ERROR ".center(80, "-"))
            print(e)
        except requests.exceptions.RequestException as e:
            print(e)
        existing_risk_exceptions.append(response.json()['data'])

    for existing_risk_exception in existing_risk_exceptions:
        for risk_exception in existing_risk_exception:
            existing_entity_exceptions.append(risk_exception['entityValue'])

    return existing_risk_exceptions, existing_entity_exceptions

def append_new_exception(entity_dups, risks, entity, expiration_date, reason, description):
    print("Adding new exception for :", entity)
    entity_dups.append(entity)
    risk_exception = {"entityType": "vulnerability", "entityValue": entity, "expirationDate": expiration_date, "context": [
    ], "reason": reason, "description": description}
    risks.append(risk_exception)
    return entity_dups, risks


def determine_exception_changes(auth_header, url, ssl_verification, existing_risk_exceptions, entity, expiration_date, reason, description):
    change_detected = False
    for existing_risk_exception in existing_risk_exceptions:
        for risk_exception in existing_risk_exception:
            new_expiration = risk_exception['expirationDate']
            new_reason = risk_exception['reason']
            appended_note = risk_exception['description']
            if entity == risk_exception['entityValue']:
                if expiration_date != risk_exception['expirationDate']:
                    new_expiration = expiration_date
                    change_detected = True
                if reason != risk_exception['reason']:
                    new_reason = reason
                    change_detected = True
                if description != risk_exception['description']:
                    print("Appending note for entity: ",
                        risk_exception['entityValue'])
                    appended_note = risk_exception['description'] + \
                        description
                    change_detected = True
                if change_detected:
                    updated_risk_exception = {"entityType": "vulnerability", "entityValue": risk_exception['entityValue'], "expirationDate": new_expiration, "context": [
                    ], "reason": new_reason, "description": appended_note}
                    description_url = url + "/" + \
                        risk_exception['riskAcceptanceDefinitionID']
                    try:
                        print("Updating entity: ", entity)
                        response = requests.put(
                            description_url, json=updated_risk_exception, headers=auth_header, verify=ssl_verification)
                        response.raise_for_status()
                    except requests.exceptions.HTTPError as e:
                        print(" ERROR ".center(80, "-"), "entity:", entity)
                        print("Failed updating entity", e)
                    except requests.exceptions.RequestException as e:
                        print(" ERROR ".center(80, "-"), "entity:", entity)
                        print(e, "Failed updating entity")


def process_exceptions(auth_header, url, ssl_verification, directory_path, existing_risk_exceptions, existing_entity_exceptions):
    for csv_data in os.listdir(directory_path):
        try:
            filename_with_path = f'{directory_path}/' + csv_data
            with open(filename_with_path) as csv_file:
                csv_reader = csv.reader(csv_file, delimiter=',')
                line_count = 0
                risks = []
                entity_dups = []
                for row in csv_reader:
                    entity = row[0]
                    expiration_date = row[1]
                    reason = row[2]
                    description = row[3]
                    if line_count == 0:
                        print(f'Column names are {", ".join(row)}')
                        line_count += 1
                    else:
                        # validate date before going any further
                        validate_date_format(expiration_date)
                        if entity not in entity_dups:
                            if entity not in existing_entity_exceptions:
                                entity_dups, risks = append_new_exception(
                                    entity_dups, risks, entity, expiration_date, reason, description)
                            else:
                                determine_exception_changes(
                                    auth_header, url, ssl_verification, existing_risk_exceptions, entity, expiration_date, reason, description)
                        else:
                            print("Found duplicate entity in CSV file: ", entity)
                        line_count += 1
                print(f'Processed {line_count} lines.')
        except OSError as e:
            print("FILE NOT FOUND".center(80,"-"))
            print(e)
            sys.exit()

        risk_exceptions = {"riskAcceptanceDefinitions": risks}

        if (len(risks) > 0):
            try:
                print("Adding new risk exceptions...")
                response = requests.post(
                    url, json=risk_exceptions, headers=auth_header, verify=ssl_verification)
                response.raise_for_status()
            except requests.exceptions.HTTPError as e:
                print(" ERROR ".center(80, "-"))
                print("Failed adding new risk acceptance", e)
            except requests.exceptions.RequestException as e:
                print(" ERROR ".center(80, "-"))
                print(e, "Failed adding new risk acceptance")
        print("Done processing file: ", filename_with_path)

def main():
    args = retrieve_set_sysdig_params()
    auth_header, url = retrieve_sysdig_header_url(args)
    ssl_verification = False
    if (args.ssl_verification == "enabled"):
        ssl_verification = True
    print("Retrieve existing exceptions...")
    existing_risk_exceptions, existing_entity_exceptions = retrieve_existing_exceptions(
        auth_header, url, ssl_verification)
    print("Process exceptions...")
    process_exceptions(
        auth_header, url, ssl_verification, args.acceptance_files_directory, existing_risk_exceptions, existing_entity_exceptions)


if __name__ == "__main__":
    main()
    
