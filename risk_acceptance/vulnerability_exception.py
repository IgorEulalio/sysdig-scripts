import csv
import requests
import sys
import os

# SYSDIG API TOKEN
auth_token = 'xxxxxxx-xxxxxxx-xxxxxxx'
auth_header = {'Authorization': 'Bearer ' + auth_token}
# SYSDIG URL - INSERT APPROPRIATE SYSDIG URL POINTING TO CORRECT REGION
url = 'https://<sysdig-base-url>/api/scanning/riskmanager/v2/definitions'


def retrieve_existing_exceptions():
    existing_risk_exceptions = []
    existing_cve_exceptions = []

    try:
        response = requests.get(url, headers=auth_header, params={'limit': 100})
        response.raise_for_status()
    except requests.exceptions.HTTPError as e:
        print(" ERROR ".center(80, "-"))
        print(e)
    except requests.exceptions.RequestException as e:
        print(e)
    existing_risk_exceptions.append((response.json()['data']))

    while (response.json()['page']['next'] != ""):
        try:
            response = requests.get(url, headers=auth_header, params={
                'cursor': response.json()['page']['next'], 'limit': 100})
            response.raise_for_status()
        except requests.exceptions.HTTPError as e:
            print(" ERROR ".center(80, "-"))
            print(e)
        except requests.exceptions.RequestException as e:
            print(e)
        existing_risk_exceptions.append(response.json()['data'])

    for existing_risk_exception in existing_risk_exceptions:
        for risk_exception in existing_risk_exception:
            existing_cve_exceptions.append(risk_exception['entityValue'])

    return existing_risk_exceptions, existing_cve_exceptions

def append_new_exception(cve_dups, risks, cve, expiration_date, reason, description):
    print("Adding new exception for :", cve)
    cve_dups.append(cve)
    risk_exception = {"entityType": "vulnerability", "entityValue": cve, "expirationDate": expiration_date, "context": [
    ], "reason": reason, "description": description}
    risks.append(risk_exception)
    return cve_dups, risks


def determine_exception_changes(existing_risk_exceptions, cve, expiration_date, reason, description):
    change_detected = False
    for existing_risk_exception in existing_risk_exceptions:
        for risk_exception in existing_risk_exception:
            new_expiration = risk_exception['expirationDate']
            new_reason = risk_exception['reason']
            appended_note = risk_exception['description']
            if cve == risk_exception['entityValue']:
                if expiration_date != risk_exception['expirationDate']:
                    new_expiration = expiration_date
                    change_detected = True
                if reason != risk_exception['reason']:
                    new_reason = reason
                    change_detected = True
                if description != risk_exception['description']:
                    print("Appending note for CVE: ",
                        risk_exception['entityValue'])
                    appended_note = risk_exception['description'] + \
                        description
                    change_detected = True
                if change_detected:
                    updated_risk_exception = {"entityType": "vulnerability", "entityValue": risk_exception['entityValue'], "expirationDate": new_expiration, "context": [
                    ], "reason": new_reason, "description": appended_note}
                    description_url = url + "/" + \
                        risk_exception['riskAcceptanceDefinitionID']
                    try:
                        print("Updating CVE: ", cve)
                        response = requests.put(
                            description_url, json=updated_risk_exception, headers=auth_header)
                        response.raise_for_status()
                    except requests.exceptions.HTTPError as e:
                        print(" ERROR ".center(80, "-"), "CVE:", cve)
                        print("Failed updating cve", e)
                    except requests.exceptions.RequestException as e:
                        print(" ERROR ".center(80, "-"), "CVE:", cve)
                        print(e, "Failed updating cve")

def process_exceptions():
    # ADD LIST OF FILES HERE
    directory_path = "cve_acceptance_files"
    existing_risk_exceptions, existing_cve_exceptions = retrieve_existing_exceptions()
    for csv_data in os.listdir(directory_path):
        try:
            filename_with_path = f'{directory_path}/' + csv_data
            with open(filename_with_path) as csv_file:
                csv_reader = csv.reader(csv_file, delimiter=',')
                line_count = 0
                risks = []
                cve_dups = []
                for row in csv_reader:
                    cve = row[0]
                    expiration_date = row[1]
                    reason = row[2]
                    description = row[3]
                    if line_count == 0:
                        print(f'Column names are {", ".join(row)}')
                        line_count += 1
                    else:
                        if cve not in cve_dups:
                            if cve not in existing_cve_exceptions:
                                cve_dups, risks = append_new_exception(
                                    cve_dups, risks, cve, expiration_date, reason, description)
                            else:
                                determine_exception_changes(
                                    existing_risk_exceptions, cve, expiration_date, reason, description)
                        else:
                            print("Found duplicate CVE in CSV file: ", cve)
                        line_count += 1
                print(f'Processed {line_count} lines.')
        except OSError as e:
            print("FILE NOT FOUND".center(80,"-"))
            print(e)
            sys.exit()

        risk_exceptions = {"riskAcceptanceDefinitions": risks}

        if (len(risks) > 0):
            try:
                print("Adding new risk exceptions")
                response = requests.post(
                    url, json=risk_exceptions, headers=auth_header)
                response.raise_for_status()
            except requests.exceptions.HTTPError as e:
                print(" ERROR ".center(80, "-"))
                print("Failed adding new risk acceptance", e)
            except requests.exceptions.RequestException as e:
                print(" ERROR ".center(80, "-"))
                print(e, "Failed adding new risk acceptance")
        print("Done processing file: ", filename_with_path)


process_exceptions()